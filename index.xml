<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kamran Sadin</title>
    <link>https://sadin.dev/</link>
    <description>Recent content on Kamran Sadin</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 12 Apr 2025 08:37:01 +0330</lastBuildDate>
    <atom:link href="https://sadin.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learn C# from Scratch: A Complete Course for Absolute Beginners</title>
      <link>https://sadin.dev/posts/csharp-for-absolute-beginners/</link>
      <pubDate>Sat, 12 Apr 2025 08:37:01 +0330</pubDate>
      <guid>https://sadin.dev/posts/csharp-for-absolute-beginners/</guid>
      <description>&lt;h1 id=&#34;learn-c-from-scratch-a-hands-on-course-for-absolute-beginners&#34;&gt;&#xD;&#xA;  Learn C# from Scratch: A Hands-On Course for Absolute Beginners&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#learn-c-from-scratch-a-hands-on-course-for-absolute-beginners&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Ready to start your coding journey? If you’ve never programmed before, this C# course is tailor-made for you. Over about six weeks, with 2-3 sessions per week (1-2 hours each), you’ll transform from a total beginner to someone who can write simple, functional programs in C#. C# is a powerful, beginner-friendly language used in games, apps, and more. With plenty of examples and step-by-step guidance, this course will make coding fun and approachable. Let’s dive in!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to C#</title>
      <link>https://sadin.dev/posts/introduction-to-c-sharp/</link>
      <pubDate>Mon, 10 Mar 2025 17:18:38 +0330</pubDate>
      <guid>https://sadin.dev/posts/introduction-to-c-sharp/</guid>
      <description>&lt;h2 id=&#34;what-is-c&#34;&gt;&#xD;&#xA;  What is C#?&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-c&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;C# (pronounced &lt;em&gt;&amp;ldquo;C sharp&amp;rdquo;&lt;/em&gt;) is a programming language developed by Microsoft as part of its .NET platform. It is powerful, versatile, and relatively easy to learn. The language draws inspiration from C and C++ while simplifying many of their complexities.&lt;/p&gt;&#xA;&lt;h3 id=&#34;key-features-of-c&#34;&gt;&#xD;&#xA;  Key Features of C#&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#key-features-of-c&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;General-Purpose:&lt;/strong&gt; C# is not limited to a specific domain; it can be used to build a wide range of applications, including:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Event Sourcing: Turning Your App into a Time Machine</title>
      <link>https://sadin.dev/posts/event-sourcing-getting-started/</link>
      <pubDate>Mon, 03 Mar 2025 07:30:27 +0330</pubDate>
      <guid>https://sadin.dev/posts/event-sourcing-getting-started/</guid>
      <description>&lt;p&gt;Hey everyone! Kamran here, and today, let&amp;rsquo;s dive deeper into Event Sourcing, especially how we manage snapshots and materialized views. If you&amp;rsquo;ve ever felt like your database only tells you the &amp;ldquo;now&amp;rdquo; and not the &amp;ldquo;how,&amp;rdquo; you&amp;rsquo;re going to love this.&lt;/p&gt;&#xA;&lt;p&gt;Imagine your application&amp;rsquo;s memory as a time machine. Instead of just saving the final result, what if you recorded every single change, every action, as an &amp;ldquo;event&amp;rdquo;? That&amp;rsquo;s event sourcing in a nutshell.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mentorship</title>
      <link>https://sadin.dev/pages/mentorship/</link>
      <pubDate>Mon, 10 Feb 2025 19:39:31 +0330</pubDate>
      <guid>https://sadin.dev/pages/mentorship/</guid>
      <description>&lt;h1 id=&#34;how-it-works-your-journey-with-sadindev&#34;&gt;&#xD;&#xA;  How It Works: Your Journey with Sadin.Dev&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#how-it-works-your-journey-with-sadindev&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h1&gt;&#xD;&#xA;&lt;p&gt;Securing a software engineering job with a relocation package and visa sponsorship is a life-changing opportunity—and we’re here to guide you through it. At Sadin.Dev, we’ve perfected a step-by-step process to prepare you for success, backed by our &lt;strong&gt;100% success rate in 2024&lt;/strong&gt;. Here’s how we turn your career goals into reality:&lt;/p&gt;&#xA;&lt;h2 id=&#34;step-1-free-consultation&#34;&gt;&#xD;&#xA;  Step 1: Free Consultation&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#step-1-free-consultation&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;Your journey starts with a free consultation. In this one-on-one meeting, our expert mentors assess your technical skills, personality, current career stage, specific requirements, and areas for improvement. We listen to your goals—whether it’s landing a job abroad or mastering a new technology—and use this insight to lay the foundation for your personalized plan.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>https://sadin.dev/pages/projects/</link>
      <pubDate>Mon, 10 Feb 2025 19:39:22 +0330</pubDate>
      <guid>https://sadin.dev/pages/projects/</guid>
      <description></description>
    </item>
    <item>
      <title>Contact</title>
      <link>https://sadin.dev/pages/contact/</link>
      <pubDate>Mon, 10 Feb 2025 19:39:14 +0330</pubDate>
      <guid>https://sadin.dev/pages/contact/</guid>
      <description></description>
    </item>
    <item>
      <title>A Comprehensive Guide to Data Types in C#</title>
      <link>https://sadin.dev/posts/2023-11-17-a-comprehensive-guide-to-data-types-in-csharp/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-11-17-a-comprehensive-guide-to-data-types-in-csharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sadin.dev/assets/posts/basics/a-comprehensive-guide-to-data-types-in-csharp.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Download PDF Version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Data types in C# define the type of data that a variable can store. Understanding and using the correct data types are crucial for writing efficient and bug-free code. This guide will walk you through the basic and advanced data types in C#, providing examples to illustrate their usage.&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;&#xD;&#xA;  Table of Contents:&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#table-of-contents&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Introduction to Data Types in C#&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What are Data Types?&lt;/li&gt;&#xA;&lt;li&gt;Importance of Choosing the Right Data Type&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Basic Data Types&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Comprehensive Guide to Fields and Properties in C#</title>
      <link>https://sadin.dev/posts/2023-11-15-a-complete-guide-to-fields-and-properties-in-csharp/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-11-15-a-complete-guide-to-fields-and-properties-in-csharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sadin.dev/assets/posts/basics/A-Complete-Guide-to-Fields-and-Properties.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Download PDF Version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Fields and properties are fundamental elements in C# that allow you to define and access data within classes and structures. This comprehensive guide will take you from the fundamentals of fields and properties to more advanced techniques, ensuring you have a deep understanding of these critical concepts in C#.&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;&#xD;&#xA;  Table of Contents:&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#table-of-contents&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Introduction to Fields and Properties in C#&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Comprehensive Guide to Loops in C#</title>
      <link>https://sadin.dev/posts/2023-11-13-a-complete-guide-to-loops-in-csharp/</link>
      <pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-11-13-a-complete-guide-to-loops-in-csharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sadin.dev/assets/posts/basics/A-Complete-Guide-to-Loops.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Download PDF Version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Loops are a fundamental programming construct that allows you to repeat a block of code multiple times. They are indispensable for automating repetitive tasks, processing collections, and controlling program flow. In this comprehensive guide, we will explore loops in C#, starting with the basics and progressing to more advanced loop techniques.&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;&#xD;&#xA;  Table of Contents:&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#table-of-contents&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Introduction to Loops in C#&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Complete Guide to Conditionals in C#</title>
      <link>https://sadin.dev/posts/2023-11-09-a-complete-guide-to-conditionals-in-csharp/</link>
      <pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-11-09-a-complete-guide-to-conditionals-in-csharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sadin.dev/assets/posts/basics/A-Complete-Guide-to-Conditionals.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Download PDF Version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Conditionals in C# are essential for controlling the flow of your program, making decisions, and executing code based on specific conditions. This comprehensive guide will take you from the fundamentals of conditionals to more advanced techniques, ensuring you have a solid understanding of this crucial aspect of C# programming.&lt;/p&gt;&#xA;&lt;h2 id=&#34;table-of-contents&#34;&gt;&#xD;&#xA;  Table of Contents:&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#table-of-contents&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Introduction to Conditionals in C#&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What are Conditionals?&lt;/li&gt;&#xA;&lt;li&gt;The Importance of Conditionals&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Basic Conditional Statements&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Comprehensive Guide to Variables in C#</title>
      <link>https://sadin.dev/posts/2023-11-07-variables-in-csharp/</link>
      <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-11-07-variables-in-csharp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sadin.dev/assets/posts/basics/A-Complete-Guid-to-Variables-in-CSharp.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Download PDF Version&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Variables are the backbone of any programming language, and C# is no exception. They allow you to store and manage data, enabling your programs to perform tasks and make decisions. In this comprehensive guide, we will explore the world of variables in C#, covering everything from their basic definition to best practices and naming conventions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-what-are-variables&#34;&gt;&#xD;&#xA;  1. What Are Variables?&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1-what-are-variables&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;At its core, a variable is a container for data. In C#, a variable has a type, a name, and a value. Variables serve the purpose of storing and managing data within your programs. Let&amp;rsquo;s break down the key concepts:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advanced Usages of Events</title>
      <link>https://sadin.dev/posts/2023-11-03-advanced-usages-of-events/</link>
      <pubDate>Fri, 03 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-11-03-advanced-usages-of-events/</guid>
      <description>&lt;h2 id=&#34;mastering-c-events-advanced-concepts&#34;&gt;&#xD;&#xA;  Mastering C# Events: Advanced Concepts&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#mastering-c-events-advanced-concepts&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;In this post, we&amp;rsquo;ll explore more advanced concepts and techniques related to C# events. These advanced topics will help you become a proficient event handler and enable you to use events in complex scenarios.&lt;/p&gt;&#xA;&lt;h3 id=&#34;custom-event-arguments&#34;&gt;&#xD;&#xA;  Custom Event Arguments&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#custom-event-arguments&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;While events typically use the built-in &lt;code&gt;EventArgs&lt;/code&gt; class to convey event information, you can create custom event argument classes to pass additional data to event handlers. Custom event arguments allow you to provide specific context to subscribers. For example, in a file monitoring application, you might create a custom event argument class to include the file name and the type of file change.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EventHandlers and Delegates</title>
      <link>https://sadin.dev/posts/2023-11-01-eventhandlers-and-delegates/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-11-01-eventhandlers-and-delegates/</guid>
      <description>&lt;h2 id=&#34;event-handlers-and-delegates&#34;&gt;&#xD;&#xA;  Event Handlers and Delegates&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#event-handlers-and-delegates&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;In the previous post, we introduced the basic concepts of C# events. Now, let&amp;rsquo;s dive a bit deeper into event handling and delegates, which are fundamental to working with events in C#.&lt;/p&gt;&#xA;&lt;h3 id=&#34;event-handlers&#34;&gt;&#xD;&#xA;  Event Handlers&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#event-handlers&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;An event handler is a method that gets executed when an event is raised. In C#, event handlers are defined with a specific signature, which typically includes two parameters:&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Guide to Event Handling in C#</title>
      <link>https://sadin.dev/posts/2023-10-31-events-introduction/</link>
      <pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-31-events-introduction/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;&#xD;&#xA;  Introduction&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Events provide a mechanism for communication between different parts of your code, allowing one component to notify others when a specific action or condition occurs.&#xA;{: .prompt-tip }&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Events are a fundamental aspect of C# programming, playing a crucial role in building responsive and interactive applications. They provide a mechanism for communication between different parts of your code, allowing one component to notify others when a specific action or condition occurs. Whether you&amp;rsquo;re a beginner or an experienced C# developer, understanding events is essential for effective software development.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Inversion Principle</title>
      <link>https://sadin.dev/posts/2023-10-26-dependency-inversion-principle/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-26-dependency-inversion-principle/</guid>
      <description>&lt;p&gt;In the realm of software design, fundamental principles serve as guiding lights for creating maintainable, flexible, and scalable codebases. One such crucial principle is the &lt;strong&gt;Dependency Inversion Principle (DIP)&lt;/strong&gt;. DIP is a fundamental component of the SOLID principles, initially introduced by Robert C. Martin. Understanding and applying the Dependency Inversion Principle is crucial for achieving decoupled and adaptable software systems.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/mastering-solid-principles-in-csharp/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/single-responsibility-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/open-closed-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/liskov-substitution-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Liskov Substitution Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/interface-segregation-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/dependency-inversion-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Dependency Inversion Principle&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;what-is-the-dependency-inversion-principle&#34;&gt;&#xD;&#xA;  What is the Dependency Inversion Principle?&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-the-dependency-inversion-principle&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;The Dependency Inversion Principle emphasizes that high-level modules should not depend on low-level modules; both should depend on abstractions. Additionally, abstractions should not depend on details; instead, details should depend on abstractions. This principle encourages the use of interfaces or abstract classes to decouple higher-level and lower-level modules.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interface Segregation Principle</title>
      <link>https://sadin.dev/posts/2023-10-24-interface-segregation-principle/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-24-interface-segregation-principle/</guid>
      <description>&lt;p&gt;In the realm of software design, fundamental principles serve as guiding lights for creating maintainable, flexible, and scalable codebases. One such crucial principle is the &lt;strong&gt;Interface Segregation Principle (ISP)&lt;/strong&gt;. ISP is a vital component of the SOLID principles, initially introduced by Robert C. Martin. Understanding and applying the Interface Segregation Principle is fundamental to achieving modular and cohesive software systems.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/mastering-solid-principles-in-csharp/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/single-responsibility-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/open-closed-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/liskov-substitution-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Liskov Substitution Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/interface-segregation-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Interface Segregation Principle&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/dependency-inversion-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dependency Inversion Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;what-is-the-interface-segregation-principle&#34;&gt;&#xD;&#xA;  What is the Interface Segregation Principle?&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-the-interface-segregation-principle&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;The Interface Segregation Principle advocates that clients should not be forced to depend on interfaces they do not use. In other words, a class should not be forced to implement methods it does not need. Instead of a monolithic interface, classes should have smaller, specific interfaces tailored to their requirements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Liskov Substitution Principle</title>
      <link>https://sadin.dev/posts/2023-10-22-liskov-substitution-principle/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-22-liskov-substitution-principle/</guid>
      <description>&lt;p&gt;In the realm of software design, adhering to fundamental principles is essential for creating maintainable, flexible, and scalable codebases. One such crucial principle is the &lt;strong&gt;Liskov Substitution Principle (LSP)&lt;/strong&gt;. LSP is a key element of the SOLID principles, initially introduced by Barbara Liskov. Understanding and applying the Liskov Substitution Principle is fundamental to achieving robust and extensible software systems.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/mastering-solid-principles-in-csharp/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/single-responsibility-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/open-closed-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/liskov-substitution-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Liskov Substitution Principle&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/interface-segregation-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/dependency-inversion-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dependency Inversion Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;what-is-the-liskov-substitution-principle&#34;&gt;&#xD;&#xA;  What is the Liskov Substitution Principle?&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-the-liskov-substitution-principle&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;The Liskov Substitution Principle defines that objects of a derived class should be substitutable for objects of the base class without affecting the correctness of the program. In simpler terms, any instance of a base class should be replaceable with an instance of a derived class without altering the desired properties of the program.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Open Closed Principle</title>
      <link>https://sadin.dev/posts/2023-10-20-open-closed-principle/</link>
      <pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-20-open-closed-principle/</guid>
      <description>&lt;p&gt;In the realm of software design, certain principles serve as guiding lights for creating maintainable, flexible, and scalable codebases. One such foundational principle is the &lt;strong&gt;Open/Closed Principle (OCP)&lt;/strong&gt;. OCP is a crucial component of the SOLID principles, initially introduced by Bertrand Meyer. Understanding and applying the Open/Closed Principle can significantly impact software design.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/mastering-solid-principles-in-csharp/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/single-responsibility-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/open-closed-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Open/Closed Principle&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/liskov-substitution-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Liskov Substitution Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/interface-segregation-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/dependency-inversion-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dependency Inversion Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;what-is-the-openclosed-principle&#34;&gt;&#xD;&#xA;  What is the Open/Closed Principle?&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-the-openclosed-principle&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;The Open/Closed Principle emphasizes that software entities (classes, modules, functions, etc.) should be open for &lt;strong&gt;extension but closed for modification&lt;/strong&gt;. In simpler terms, the behavior of a module can be extended without modifying its source code. This principle promotes the creation of a system that is both adaptable and sustainable over time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Single Responsibility Principle</title>
      <link>https://sadin.dev/posts/2023-10-18-single-responsibility-principle/</link>
      <pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-18-single-responsibility-principle/</guid>
      <description>&lt;p&gt;In the realm of software development, adhering to well-established design principles is paramount for creating maintainable, flexible, and scalable codebases. One such foundational principle is the &lt;strong&gt;Single Responsibility Principle (SRP)&lt;/strong&gt;. SRP is one of the SOLID principles, initially introduced by Robert C. Martin, emphasizing a fundamental concept that profoundly influences software design.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/mastering-solid-principles-in-csharp/?&#34; &gt;Introduction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/single-responsibility-principle/?&#34; &gt;&lt;strong&gt;Single Responsibility Principle&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/open-closed-principle/?&#34; &gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/liskov-substitution-principle/?&#34; &gt;Liskov Substitution Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/interface-segregation-principle/?&#34; &gt;Interface Segregation Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/dependency-inversion-principle/?&#34; &gt;Dependency Inversion Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;what-is-the-single-responsibility-principle&#34;&gt;&#xD;&#xA;  What is the Single Responsibility Principle?&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-the-single-responsibility-principle&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;At its core, SRP advocates that a class should have a &lt;strong&gt;single reason to change&lt;/strong&gt;, meaning it should only have one responsibility. Essentially, a class should encapsulate one aspect of the functionality within the software. By adhering to this principle, the design becomes more modular, maintainable, and easier to extend.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mastering SOLID Principles in C#, Building Robust and Maintainable Applications</title>
      <link>https://sadin.dev/posts/2023-10-15-mastering-solid-principles-in-csharp/</link>
      <pubDate>Sun, 15 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-15-mastering-solid-principles-in-csharp/</guid>
      <description>&lt;p&gt;In the realm of software development, crafting code that stands the test of time and remains flexible in the face of evolving requirements is an art. Enter the &lt;strong&gt;SOLID principles&lt;/strong&gt;, a set of guiding lights that illuminate the path toward building &lt;strong&gt;robust and maintainable applications&lt;/strong&gt;. Let&amp;rsquo;s delve into these principles, accompanied by C# examples, and explore how they transform real-world projects.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/mastering-solid-principles-in-csharp/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/single-responsibility-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/open-closed-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open/Closed Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/liskov-substitution-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Liskov Substitution Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/interface-segregation-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface Segregation Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/dependency-inversion-principle/?&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dependency Inversion Principle&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;understanding-principles-in-software-design&#34;&gt;&#xD;&#xA;  Understanding Principles in Software Design&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#understanding-principles-in-software-design&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;In software design, a principle is a fundamental and foundational guideline that guides developers in creating software that is maintainable, scalable, and robust. Principles act as a set of recommended practices and rules that help in making design decisions throughout the software development lifecycle. They are based on experience, industry best practices, and lessons learned over time. These principles provide a higher-level understanding of how to structure code, organize components, and manage dependencies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abstract and Interface in C#</title>
      <link>https://sadin.dev/posts/2023-10-06-abstract-and-interface/</link>
      <pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-06-abstract-and-interface/</guid>
      <description>&lt;h2 id=&#34;abstract-class&#34;&gt;&#xD;&#xA;  Abstract Class&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#abstract-class&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;h3 id=&#34;definition&#34;&gt;&#xD;&#xA;  Definition&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#definition&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h3&gt;&#xD;&#xA;&lt;p&gt;An abstract class in C# is a class marked with the abstract keyword that may contain abstract and non-abstract members (methods, properties, events, etc.).&lt;br&gt;&#xA;An abstract class provides a common structure and behavior for derived classes and allows for partial implementation by providing some method implementations while requiring derived classes to implement others.&lt;br&gt;&#xA;An abstract class is like an uncompleted class that can be developed in the future and it is like an interface with a wide vision. An abstract class can have abstract methods like interfaces that should be implemented in the derived class, furthermore, you can have non-abstract methods that do not have to be implemented in a derived class, and abstract methods can be abstract in subclasses if a subclass is defined as abstract. An abstract class can not be instantiated. A derived class can implement or override an abstract class. Also, an abstract class can have constructors and this is a major difference between an abstract class and an interface.&#xA;Let me summarize, the abstract class is more powerful than the interface in that you have the ability to decide if you want to let the user decide to use the original methods in the abstract class or override them or even you can have abstract methods that the user can decide how to implement them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Delegates Part 2</title>
      <link>https://sadin.dev/posts/2023-10-04-delegates-part-2/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-04-delegates-part-2/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/delegates-part-1-plugin-methods-with-delegates/&#34; &gt;&lt;strong&gt;Delegates Part 1&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://sadin.dev/posts/delegates-part-2/&#34; &gt;&lt;strong&gt;Delegates Part 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;prerequisits&#34;&gt;&#xD;&#xA;  Prerequisits&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#prerequisits&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;You want to read the second part of Delegates, right?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first thing that you need is to read the &lt;a href=&#34;https://sadin.dev/posts/delegates-part-1-plugin-methods-with-delegates/&#34; &gt;previous part (Part 1)&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;The next thing is putting a smile please put a smile on your face then start to read the article&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;target-methods&#34;&gt;&#xD;&#xA;  Target methods&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#target-methods&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;As you remember, we agreed that a delegate can point to a method, right? In simple words, it means that we can have a variable that can hold a method in it and then we can call that method by calling this variable.&lt;br&gt;&#xA;We have local, static, and instance methods in C#, so the delegate can point to which of them? All! A delegate&amp;rsquo;s target method can be a local, static, or instance method.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Delegates Part 1 Plugin methods with Delegates</title>
      <link>https://sadin.dev/posts/2023-10-01-delegates-part-1-plugin-methods-with-delegates/</link>
      <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-10-01-delegates-part-1-plugin-methods-with-delegates/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://sadin.dev/posts/delegates-part-1-plugin-methods-with-delegates/&#34; &gt;&lt;strong&gt;Delegates Part 1&lt;/strong&gt;&lt;/a&gt;&#xA;&lt;a href=&#34;https://sadin.dev/posts/delegates-part-2/&#34; &gt;&lt;strong&gt;Delegates Part 2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;This post is just to get familiar with Delegates in C#, in the next posts I will talk about delegates in advance.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-delegate&#34;&gt;&#xD;&#xA;  What is Delegate&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#what-is-delegate&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;A delegate is an object that knows how to call a method.&#xA;{: .prompt-tip }&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;You know variables in C#, right? A delegate is a reference type variable that holds the reference to a method and the reference can be changed at runtime.&lt;br&gt;&#xA;Delegates are usually used for implementing events and the call-back methods (We will get back to this soon).&lt;br&gt;&#xA;Before getting started, let&amp;rsquo;s see the syntax of a delegate:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>https://sadin.dev/posts/2023-09-30-hello-world/</link>
      <pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/posts/2023-09-30-hello-world/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;&#xD;&#xA;  Introduction&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#introduction&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;I am Kamran Sadin, a Software Engineer .&lt;/p&gt;&#xA;&lt;p&gt;Finally, I decided to use Github Pages and Jekyll to run my blog.&lt;/p&gt;&#xA;&lt;p&gt;In this blog, I am going to share my knowledge as a Software Engineer, my main purpose is to share C# Developer Roadmap content but I will also create other content.&lt;/p&gt;&#xA;&lt;p&gt;For the C# Developer roadmap, you can follow &lt;a href=&#34;https://www.linkedin.com/search/results/all/?keywords=%23100DaysOfCSharp&amp;amp;origin=GLOBAL_SEARCH_HEADER&amp;amp;sid=S%2C1&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#100DaysOfCSharp&lt;/a&gt; on &lt;a href=&#34;https://www.linkedin.com/in/MrSadin&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkedIn&lt;/a&gt; or the &lt;code&gt;CSharp&lt;/code&gt; category on my blog.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://sadin.dev/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sadin.dev/pages/about/</guid>
      <description>&lt;h2 id=&#34;senior-net-developer&#34;&gt;&#xD;&#xA;  Senior .NET Developer&#xD;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#senior-net-developer&#34;&gt;&#xD;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xD;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;p&gt;📍 Tehran, Iran&lt;br&gt;&#xA;📧 &lt;a href=&#34;mailto:mrsadin@gmail.com&#34; &gt;mrsadin@gmail.com&lt;/a&gt;&lt;br&gt;&#xA;📱 &lt;a href=&#34;tel:&amp;#43;989112794171&#34; &gt;+98 911 279 4171&lt;/a&gt;&lt;br&gt;&#xA;🔗 &lt;a href=&#34;https://www.linkedin.com/in/MrSadin&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkedIn&lt;/a&gt; | &lt;a href=&#34;https://sadin.dev&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Website&lt;/a&gt; | &lt;a href=&#34;https://youtube.com/c/EnKamran&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Youtube&lt;/a&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;I am a passionate &lt;strong&gt;Senior .NET Developer&lt;/strong&gt; with extensive experience in designing and developing scalable, high-performance applications. With a strong background in &lt;strong&gt;Clean Architecture, CQRS, DDD&lt;/strong&gt;, and cloud-based solutions, I have successfully led multiple teams and projects. My expertise in &lt;strong&gt;Azure DevOps, Docker, and Microservices&lt;/strong&gt; allows me to build robust and efficient applications tailored to business needs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
